
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
}

char uart_receive_char(){
	while(!(UCSRA & (1 << RXC)));
		return UDR;
}
  6c:	87 e6       	ldi	r24, 0x67	; 103
  6e:	89 b9       	out	0x09, r24	; 9
  70:	10 bc       	out	0x20, r1	; 32
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
  76:	80 b5       	in	r24, 0x20	; 32
  78:	86 60       	ori	r24, 0x06	; 6
  7a:	80 bd       	out	0x20, r24	; 32
  7c:	08 95       	ret

0000007e <uart_send_char>:
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <uart_send_char>
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <main>:
#include <avr/sfr_defs.h>
#include "uart_config.h"
int main(void)
{
    //UART initialization
	uart_init(9600);
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
	DDRC &= ~((1<<PC0) | (1<<PC3));
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	86 7f       	andi	r24, 0xF6	; 246
  92:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC0) | (1<<PC3);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	89 60       	ori	r24, 0x09	; 9
  98:	85 bb       	out	0x15, r24	; 21
	
    while (1) 
    {
		if(bit_is_clear(PINC, 0)){
  9a:	98 99       	sbic	0x13, 0	; 19
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <main+0x32>
			uart_send_char('Y');
  9e:	89 e5       	ldi	r24, 0x59	; 89
  a0:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	85 ea       	ldi	r24, 0xA5	; 165
  a8:	9e e0       	ldi	r25, 0x0E	; 14
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x24>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x2e>
  b4:	00 00       	nop
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <main+0x14>
			_delay_ms(300);
		}
		else if(bit_is_clear(PINC, 3)){
  b8:	9b 99       	sbic	0x13, 3	; 19
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x14>
			uart_send_char('G');
  bc:	87 e4       	ldi	r24, 0x47	; 71
  be:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_send_char>
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	85 ea       	ldi	r24, 0xA5	; 165
  c6:	9e e0       	ldi	r25, 0x0E	; 14
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x42>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x4c>
  d2:	00 00       	nop
  d4:	e2 cf       	rjmp	.-60     	; 0x9a <main+0x14>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
