
UART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b8  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fd  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  000014b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:

void uart_send_string(char* string){
	while(*string > 0)
		uart_send_char(*string++);
	uart_send_char('\0');
}
  6c:	87 e6       	ldi	r24, 0x67	; 103
  6e:	89 b9       	out	0x09, r24	; 9
  70:	10 bc       	out	0x20, r1	; 32
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
  76:	80 b5       	in	r24, 0x20	; 32
  78:	86 60       	ori	r24, 0x06	; 6
  7a:	80 bd       	out	0x20, r24	; 32
  7c:	08 95       	ret

0000007e <uart_receive_char>:

char uart_receive_char(){
	while(!(UCSRA & (1 << RXC)));
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <uart_receive_char>
		return UDR;
  82:	8c b1       	in	r24, 0x0c	; 12
}
  84:	08 95       	ret

00000086 <main>:
#include "UART_config.h"


int main(void)
{
	DDRC |= (1<<PC0) | (1<<PC5);
  86:	84 b3       	in	r24, 0x14	; 20
  88:	81 62       	ori	r24, 0x21	; 33
  8a:	84 bb       	out	0x14, r24	; 20
	
    uart_init(9600);
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	95 e2       	ldi	r25, 0x25	; 37
  90:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
	char received;
    while (1) 
    {
		received = uart_receive_char();
  94:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_receive_char>
		if(received == 'Y'){
  98:	89 35       	cpi	r24, 0x59	; 89
  9a:	19 f4       	brne	.+6      	; 0xa2 <main+0x1c>
			PORTC |= (1<<PC0);
  9c:	a8 9a       	sbi	0x15, 0	; 21
			PORTC &= ~(1<<PC5);
  9e:	ad 98       	cbi	0x15, 5	; 21
  a0:	f9 cf       	rjmp	.-14     	; 0x94 <main+0xe>
		}
		else if(received == 'G'){
  a2:	87 34       	cpi	r24, 0x47	; 71
  a4:	b9 f7       	brne	.-18     	; 0x94 <main+0xe>
			PORTC |= (1<<PC5);
  a6:	ad 9a       	sbi	0x15, 5	; 21
			PORTC &= ~(1<<PC0);
  a8:	a8 98       	cbi	0x15, 0	; 21
  aa:	f4 cf       	rjmp	.-24     	; 0x94 <main+0xe>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
