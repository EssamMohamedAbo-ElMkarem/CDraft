
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f2  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062e  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_master_spi>:
	    }
    }
}

void init_master_spi(){
	SPCR |= (1<<MSTR) | (1<<SPE) | (1<<SPR0);
  6c:	8d b1       	in	r24, 0x0d	; 13
  6e:	81 65       	ori	r24, 0x51	; 81
  70:	8d b9       	out	0x0d, r24	; 13
	DDRB |= (1<<PB5) |(1<<PB7);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	80 6a       	ori	r24, 0xA0	; 160
  76:	87 bb       	out	0x17, r24	; 23
  78:	08 95       	ret

0000007a <master_transmit>:
}

void master_transmit( char data){
	SPDR = data;
  7a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  7c:	77 9b       	sbis	0x0e, 7	; 14
  7e:	fe cf       	rjmp	.-4      	; 0x7c <master_transmit+0x2>
}
  80:	08 95       	ret

00000082 <main>:
void init_master_spi();
void master_transmit(char data);

int main(void)
{
    DDRC &= ~((1<<PC0) | (1<<PC3));
  82:	84 b3       	in	r24, 0x14	; 20
  84:	86 7f       	andi	r24, 0xF6	; 246
  86:	84 bb       	out	0x14, r24	; 20
    PORTC |= (1<<PC0) | (1<<PC3);
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	89 60       	ori	r24, 0x09	; 9
  8c:	85 bb       	out	0x15, r24	; 21
    init_master_spi();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <init_master_spi>
    while (1)
    {
	    if(bit_is_clear(PINC, 0)){
  92:	98 99       	sbic	0x13, 0	; 19
  94:	0d c0       	rjmp	.+26     	; 0xb0 <main+0x2e>
		    master_transmit('Y');
  96:	89 e5       	ldi	r24, 0x59	; 89
  98:	0e 94 3d 00 	call	0x7a	; 0x7a <master_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	85 ea       	ldi	r24, 0xA5	; 165
  a0:	9e e0       	ldi	r25, 0x0E	; 14
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x20>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2a>
  ac:	00 00       	nop
  ae:	f1 cf       	rjmp	.-30     	; 0x92 <main+0x10>
		    _delay_ms(300);
	    }
	    else if(bit_is_clear(PINC, 3)){
  b0:	9b 99       	sbic	0x13, 3	; 19
  b2:	ef cf       	rjmp	.-34     	; 0x92 <main+0x10>
		    master_transmit('G');
  b4:	87 e4       	ldi	r24, 0x47	; 71
  b6:	0e 94 3d 00 	call	0x7a	; 0x7a <master_transmit>
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	85 ea       	ldi	r24, 0xA5	; 165
  be:	9e e0       	ldi	r25, 0x0E	; 14
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x3e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x48>
  ca:	00 00       	nop
  cc:	e2 cf       	rjmp	.-60     	; 0x92 <main+0x10>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
