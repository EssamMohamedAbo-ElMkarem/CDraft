
SLAVE_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060b  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000585  00000000  00000000  0000079b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000129b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_slave_spi>:
	return 0;
}


void init_slave_spi(){
	SPCR |= (1<<SPE);
  6c:	6e 9a       	sbi	0x0d, 6	; 13
	DDRB |= (1<<PB6);
  6e:	be 9a       	sbi	0x17, 6	; 23
  70:	08 95       	ret

00000072 <receive_spi>:
}
char receive_spi(){
	while(!(SPSR & (1<<SPIF)));
  72:	77 9b       	sbis	0x0e, 7	; 14
  74:	fe cf       	rjmp	.-4      	; 0x72 <receive_spi>
	return SPDR;
  76:	8f b1       	in	r24, 0x0f	; 15
}
  78:	08 95       	ret

0000007a <main>:
char receive_spi();


int main(void)
{
	DDRC |= (1<<PC0) | (1<<PC5);
  7a:	84 b3       	in	r24, 0x14	; 20
  7c:	81 62       	ori	r24, 0x21	; 33
  7e:	84 bb       	out	0x14, r24	; 20
	init_slave_spi();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <init_slave_spi>
	char received;
	while (1)
	{
		received = receive_spi();
  84:	0e 94 39 00 	call	0x72	; 0x72 <receive_spi>
		if(received == 'Y'){
  88:	89 35       	cpi	r24, 0x59	; 89
  8a:	19 f4       	brne	.+6      	; 0x92 <main+0x18>
			PORTC |= (1<<PC0);
  8c:	a8 9a       	sbi	0x15, 0	; 21
			PORTC &= ~(1<<PC5);
  8e:	ad 98       	cbi	0x15, 5	; 21
  90:	f9 cf       	rjmp	.-14     	; 0x84 <main+0xa>
		}
		else if(received == 'G'){
  92:	87 34       	cpi	r24, 0x47	; 71
  94:	b9 f7       	brne	.-18     	; 0x84 <main+0xa>
			PORTC |= (1<<PC5);
  96:	ad 9a       	sbi	0x15, 5	; 21
			PORTC &= ~(1<<PC0);
  98:	a8 98       	cbi	0x15, 0	; 21
  9a:	f4 cf       	rjmp	.-24     	; 0x84 <main+0xa>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
