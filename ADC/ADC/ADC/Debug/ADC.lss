
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ce  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fc  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e8  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000UL
#include <avr/io.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t converted_data = 0;
  76:	19 82       	std	Y+1, r1	; 0x01
	DDRA = 0x00;
  78:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0xff;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	84 bb       	out	0x14, r24	; 20
	ADCSRA |= (3<<ADPS0);
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	83 60       	ori	r24, 0x03	; 3
  82:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);
  84:	37 9a       	sbi	0x06, 7	; 6
	ADMUX |= (1<<MUX0);
  86:	38 9a       	sbi	0x07, 0	; 7
	ADMUX |= (1<<ADLAR);
  88:	3d 9a       	sbi	0x07, 5	; 7
    while (1) 
    {
		ADCSRA |= (1<<ADSC);
  8a:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC));
  8c:	36 99       	sbic	0x06, 6	; 6
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x20>
		converted_data = ADCH;
  90:	85 b1       	in	r24, 0x05	; 5
  92:	89 83       	std	Y+1, r24	; 0x01
		PORTC = converted_data;
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	85 bb       	out	0x15, r24	; 21
    }
  98:	f8 cf       	rjmp	.-16     	; 0x8a <main+0x1e>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
