
sevensegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081f  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000643  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c8  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  7a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display_one>:
}

//function used to display array content on a chosen 7seg using port_activator flag
void display_one(unsigned char array[], unsigned char size, unsigned char port_activator)
{
	if(port_activator == 0){
  82:	44 23       	and	r20, r20
  84:	19 f0       	breq	.+6      	; 0x8c <display_one+0xa>
			PORTA = array[i];
			_delay_ms(500);
		}
	}
	else{
		for(int i = 0; i < size; i++)
  86:	61 11       	cpse	r22, r1
  88:	15 c0       	rjmp	.+42     	; 0xb4 <display_one+0x32>
  8a:	08 95       	ret

//function used to display array content on a chosen 7seg using port_activator flag
void display_one(unsigned char array[], unsigned char size, unsigned char port_activator)
{
	if(port_activator == 0){
		for(int i = 0; i < size; i++)
  8c:	66 23       	and	r22, r22
  8e:	19 f1       	breq	.+70     	; 0xd6 <display_one+0x54>
  90:	fc 01       	movw	r30, r24
  92:	86 0f       	add	r24, r22
  94:	91 1d       	adc	r25, r1
		{
			PORTA = array[i];
  96:	21 91       	ld	r18, Z+
  98:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e7       	ldi	r18, 0x7F	; 127
  9c:	3a e1       	ldi	r19, 0x1A	; 26
  9e:	46 e0       	ldi	r20, 0x06	; 6
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <display_one+0x1e>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <display_one+0x28>
  aa:	00 00       	nop

//function used to display array content on a chosen 7seg using port_activator flag
void display_one(unsigned char array[], unsigned char size, unsigned char port_activator)
{
	if(port_activator == 0){
		for(int i = 0; i < size; i++)
  ac:	8e 17       	cp	r24, r30
  ae:	9f 07       	cpc	r25, r31
  b0:	91 f7       	brne	.-28     	; 0x96 <display_one+0x14>
  b2:	08 95       	ret
  b4:	fc 01       	movw	r30, r24
  b6:	86 0f       	add	r24, r22
  b8:	91 1d       	adc	r25, r1
		}
	}
	else{
		for(int i = 0; i < size; i++)
		{
			PORTB = array[i];
  ba:	21 91       	ld	r18, Z+
  bc:	28 bb       	out	0x18, r18	; 24
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	3a e1       	ldi	r19, 0x1A	; 26
  c2:	46 e0       	ldi	r20, 0x06	; 6
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <display_one+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <display_one+0x4c>
  ce:	00 00       	nop
			PORTA = array[i];
			_delay_ms(500);
		}
	}
	else{
		for(int i = 0; i < size; i++)
  d0:	e8 17       	cp	r30, r24
  d2:	f9 07       	cpc	r31, r25
  d4:	91 f7       	brne	.-28     	; 0xba <display_one+0x38>
  d6:	08 95       	ret

000000d8 <display_both>:
}

//function used to display content of 2 arrays on both 7segs
void display_both(unsigned char arr1[], unsigned char arr2[], unsigned char size)
{
	for(int i = 0; i < size; i++)
  d8:	44 23       	and	r20, r20
  da:	b1 f0       	breq	.+44     	; 0x108 <display_both+0x30>
  dc:	fc 01       	movw	r30, r24
  de:	a6 2f       	mov	r26, r22
  e0:	b7 2f       	mov	r27, r23
  e2:	9c 01       	movw	r18, r24
  e4:	24 0f       	add	r18, r20
  e6:	31 1d       	adc	r19, r1
	{
		PORTA = arr1[i];
  e8:	91 91       	ld	r25, Z+
  ea:	9b bb       	out	0x1b, r25	; 27
		PORTB = arr2[i];
  ec:	9d 91       	ld	r25, X+
  ee:	98 bb       	out	0x18, r25	; 24
  f0:	4f e7       	ldi	r20, 0x7F	; 127
  f2:	8a e1       	ldi	r24, 0x1A	; 26
  f4:	96 e0       	ldi	r25, 0x06	; 6
  f6:	41 50       	subi	r20, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <display_both+0x1e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <display_both+0x28>
 100:	00 00       	nop
}

//function used to display content of 2 arrays on both 7segs
void display_both(unsigned char arr1[], unsigned char arr2[], unsigned char size)
{
	for(int i = 0; i < size; i++)
 102:	e2 17       	cp	r30, r18
 104:	f3 07       	cpc	r31, r19
 106:	81 f7       	brne	.-32     	; 0xe8 <display_both+0x10>
 108:	08 95       	ret

0000010a <main>:
//function declarations
void display_one(unsigned char array[], unsigned char size, unsigned char port_activator);
void display_both(unsigned char arr1[], unsigned char arr2[], unsigned char size);

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	64 97       	sbiw	r28, 0x14	; 20
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0b01111111;
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b01111111;
 122:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00000000;
 124:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b00000011;  //internal pull-up resistors enabled for PC0 and PC1
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	85 bb       	out	0x15, r24	; 21
	unsigned char numbers[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F}; //numbers array in hex for 7seg
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	e0 e6       	ldi	r30, 0x60	; 96
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	de 01       	movw	r26, r28
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x2a>
	unsigned char letters[10] = {0x79, 0x6D, 0x6D, 0x77, 0x37, 0x40, 0x66, 0x4F, 0x5B, 0x3F}; //letters array in hex for 7seg
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	ea e6       	ldi	r30, 0x6A	; 106
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	de 01       	movw	r26, r28
 144:	1b 96       	adiw	r26, 0x0b	; 11
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	8a 95       	dec	r24
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x3c>
    {

		if(PINC == 0b00000010){display_one(numbers, 10, 0);}
		else if(PINC == 0b00000001){display_one(letters, 10, 1);}
		else if(PINC == 0b00000000){display_both(numbers, letters, 10);}
		else{PORTA = 0x76; PORTB = 0x76;}
 14e:	16 e7       	ldi	r17, 0x76	; 118
	unsigned char letters[10] = {0x79, 0x6D, 0x6D, 0x77, 0x37, 0x40, 0x66, 0x4F, 0x5B, 0x3F}; //letters array in hex for 7seg
		
    while (1) 
    {

		if(PINC == 0b00000010){display_one(numbers, 10, 0);}
 150:	83 b3       	in	r24, 0x13	; 19
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	39 f4       	brne	.+14     	; 0x164 <main+0x5a>
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	6a e0       	ldi	r22, 0x0A	; 10
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 41 00 	call	0x82	; 0x82 <display_one>
 162:	f6 cf       	rjmp	.-20     	; 0x150 <main+0x46>
		else if(PINC == 0b00000001){display_one(letters, 10, 1);}
 164:	83 b3       	in	r24, 0x13	; 19
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	39 f4       	brne	.+14     	; 0x178 <main+0x6e>
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	ce 01       	movw	r24, r28
 170:	0b 96       	adiw	r24, 0x0b	; 11
 172:	0e 94 41 00 	call	0x82	; 0x82 <display_one>
 176:	ec cf       	rjmp	.-40     	; 0x150 <main+0x46>
		else if(PINC == 0b00000000){display_both(numbers, letters, 10);}
 178:	83 b3       	in	r24, 0x13	; 19
 17a:	81 11       	cpse	r24, r1
 17c:	09 c0       	rjmp	.+18     	; 0x190 <main+0x86>
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	be 01       	movw	r22, r28
 182:	65 5f       	subi	r22, 0xF5	; 245
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 6c 00 	call	0xd8	; 0xd8 <display_both>
 18e:	e0 cf       	rjmp	.-64     	; 0x150 <main+0x46>
		else{PORTA = 0x76; PORTB = 0x76;}
 190:	1b bb       	out	0x1b, r17	; 27
 192:	18 bb       	out	0x18, r17	; 24
 194:	dd cf       	rjmp	.-70     	; 0x150 <main+0x46>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
